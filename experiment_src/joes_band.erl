-module(joes_band).
-compile(export_all).

start(Pid) ->
    io:format("joes_band started:~p~n",[Pid]),
    Pid ! [#{cmd=> svg_add_canvas, 
	     parent => canvas,
	     id => top, 
	     width => 1000, 
	     height => 500,
	     color=> <<"#ffffbb">>},

	   #{cmd => svg_add_object,
	     parent => top,
	     type => circle,
	     cx=>450, cy=>150, r=>40, stroke=>green, 'stroke-width'=>4, fill=>yellow},

	    #{cmd => svg_add_object,
	      parent => top,
	      type => image,
	      x=>145, y=>150,
  
	      width => 200, height => 100
	      ,'xlink:href' => <<"./p5.jpg">>
	     },



	   
	   #{cmd => svg_add_object,
	     parent => top,
	     id => a1,
	     type => rect,
	     x=>100,y=>100,width=>200,height=>56,fill=>red},

	   #{cmd => send_keystrokes},
	  
	   #{cmd => svg_add_object, type => g, parent => top,
	     id => move1, onmousedown => <<"selectElement(evt)">>,
	     x => 100, y => 100,
	     transform => <<"translate(100,100)">>},
	   
	   #{cmd => svg_add_object, type => circle, parent => move1,
	     class => control_point, 
	     cx => 0, cy => 0, r=> 10},
	  
	   #{cmd => svg_add_object, type => circle, parent => move1,
	     class => <<"point2 invisible">>,
	     cx => 0, cy => 0, r=> 3},
	     
	   #{cmd => svg_add_object, type => g,
	     parent => top,
	     id => erlang1,
	     transform => <<"translate(600.0,200.0) scale(0.01,-0.01)">>,
	     fill => <<"#000000">>, stroke=>none,
	     x => 0, y=> 0, parent => top},

	   #{cmd => svg_add_object, type => path,
	     d => erlang_logo(), fill=> <<"#aa1e2d">>,
	     parent => erlang1},


	   #{cmd => make_draggable,
	     parent => top,
	     id => x1,
	     radius => 12,
	     color => red}
	  ],
    spawn(fun() -> rotate(Pid, 0) end),
    loop(Pid).

rotate(Pid, N) ->
    receive
	after 100 ->
		Pid ! [#{cmd => svg_configure,
			 id => erlang1,
			 args => [transform,tr(N)]}],
		rotate(Pid, N+2)
	end.

tr(N) ->
    list_to_binary(["translate(600.0,200.0) scale(0.01,-0.01)"
		    "rotate(", integer_to_list(N),")"]).
    

loop(Pid) ->
    receive
	{Pid, #{click := <<"add_circle">>}} ->
	    Pid ! [#{cmd => svg_add_object,
		     id => c1,
		     type => circle,
		     parent => top,
		     r => 30, 
		     cx => 34, 
		     cy => 20,
		     fill=> blue}],
	    loop(Pid);
	
	{Pid, #{cmd := <<"drag_moved">>, x := X, y := Y}} ->
	    Pid ! [#{cmd => svg_configure,
		     id => a1,
		     args => [x,X,y,Y]}],
	    loop(Pid);

	{Pid, #{click := <<"draw_music">>}} ->
	    music(Pid),
	    loop(Pid);

	{Pid, #{click := <<"move_circle">>}} ->
	    XX = crypto:rand_uniform(20,400),
	    YY = crypto:rand_uniform(20,200),
	    Pid ! [#{cmd => svg_configure,
		     id => c1,
		     args => [cx, XX, cy, YY]}],
	    loop(Pid);

	    
	{Pid, #{click := <<"delete_rectangle">>}} ->
	    Pid ! [#{cmd=> svg_delete_object, 
		     id => a1}],
	    loop(Pid);
	{Pid, #{key :=K}=S} ->
	    Pid ! [#{cmd => fill_div, id=> key,
		     txt => list_to_binary(io_lib:format("~p", [S]))}],
	    loop(Pid);
	Any ->
	    io:format("joe got:~p~n",[Any]),
	    loop(Pid)
    end.

music(Pid) ->
    Pid ! C = staves:compute_staves(4),
    io:format("C=~p~n",[C]).

translate(X, Y) ->
    mk_path(['translate(',X,',',Y,')']).

mk_path(L) ->
    list_to_binary([mk_path1(I) || I <- L]).

mk_path1(X) when is_atom(X) ->
    atom_to_list(X);
mk_path1(X) when is_integer(X) ->
    [$\s|integer_to_list(X)].
 
	     
erlang_logo() ->	      
    <<"M7560 7367 c-99 -34 -202 -108 -335 -242 -667 -670 -1389 -2289
-1540 -3455 -22 -169 -30 -464 -16 -595 11 -96 18 -139 47 -276 5 -24 -6 -40
-92 -127 -55 -54 -121 -112 -148 -127 -165 -96 -351 -110 -455 -35 -120 87
-169 262 -150 531 20 301 96 553 265 891 116 231 146 353 107 427 -36 68 -107
94 -193 71 -60 -16 -121 -80 -185 -194 -107 -190 -244 -281 -370 -247 -78 21
-79 21 -50 146 63 279 35 496 -79 611 -102 103 -213 94 -303 -24 -51 -68 -68
-137 -67 -282 0 -147 27 -270 95 -445 l43 -108 -18 -71 c-44 -171 -167 -479
-295 -734 -101 -202 -171 -323 -285 -496 l-91 -138 -7 93 c-21 271 -100 461
-251 606 -84 80 -187 137 -302 169 -94 25 -304 30 -406 9 -353 -71 -615 -327
-700 -682 -18 -76 -21 -108 -16 -233 10 -271 90 -461 259 -615 72 -65 225
-144 327 -169 35 -8 65 -17 68 -19 7 -7 -208 -75 -289 -91 -129 -27 -277 -39
-393 -33 -483 25 -846 384 -916 905 -16 119 -6 361 21 484 120 567 579 1033
1155 1172 l71 17 89 -30 c124 -41 209 -54 323 -49 162 7 262 69 262 161 0 123
-149 197 -406 202 -126 2 -134 4 -191 34 -108 58 -191 157 -235 281 -19 56
-23 85 -23 205 0 121 4 149 24 205 101 284 376 470 697 470 220 0 374 -74 444
-212 24 -50 30 -74 30 -128 0 -37 -7 -89 -15 -116 -8 -27 -15 -77 -15 -111 0
-75 24 -109 85 -123 113 -25 238 63 314 223 55 114 75 208 75 342 0 210 -54
346 -194 486 -72 73 -101 94 -180 133 -133 64 -227 87 -388 93 -214 9 -364
-26 -570 -132 -237 -121 -439 -319 -550 -540 -78 -155 -117 -355 -109 -549 7
-160 24 -230 88 -364 40 -82 65 -119 124 -181 l75 -78 -83 -17 c-209 -45 -507
-165 -707 -284 -658 -393 -1021 -982 -1020 -1655 1 -331 91 -643 261 -902 66
-100 259 -294 358 -359 197 -131 429 -213 691 -245 107 -14 348 -14 465 -1
604 69 1123 391 1565 971 325 426 584 949 900 1820 l53 146 31 -18 c72 -42
234 -62 315 -39 19 5 36 8 38 6 2 -2 -26 -72 -62 -157 -155 -361 -265 -698
-305 -934 -48 -281 -3 -523 120 -646 84 -84 184 -119 341 -119 318 0 697 226
1027 614 l33 38 67 -65 c117 -112 229 -153 397 -144 316 16 666 267 945 678
l67 98 42 -85 c126 -253 337 -314 600 -173 195 105 416 328 574 582 l55 87 18
-52 c55 -170 139 -251 293 -284 210 -44 479 26 721 189 98 66 256 220 336 327
75 100 179 298 224 425 18 50 85 302 149 561 130 516 149 570 266 748 145 221
305 334 420 296 56 -18 75 -58 75 -155 0 -94 -16 -166 -129 -565 -135 -483
-181 -682 -181 -792 0 -75 26 -200 52 -253 91 -182 293 -219 543 -97 129 63
234 143 365 278 117 121 180 202 261 334 30 49 57 89 60 90 3 0 14 -30 24 -66
51 -191 143 -280 312 -304 122 -17 235 14 370 102 82 53 254 219 313 301 19
27 36 44 38 39 1 -5 -52 -191 -118 -413 -133 -445 -168 -556 -212 -671 l-29
-78 -43 0 c-47 0 -229 17 -576 55 -124 13 -304 29 -400 35 -234 16 -726 16
-875 1 -935 -95 -1574 -480 -1706 -1028 -27 -112 -30 -279 -6 -373 39 -152
135 -294 268 -396 440 -339 1401 -388 2114 -110 63 25 177 77 253 115 270 138
473 288 712 530 236 238 425 494 584 791 l45 84 83 -2 c108 -4 335 13 457 34
337 57 657 223 871 451 131 141 260 346 260 416 0 42 -31 77 -69 77 -45 0 -90
-39 -162 -140 -94 -131 -175 -218 -267 -287 -197 -149 -444 -233 -767 -263
-103 -9 -275 -14 -275 -7 0 2 20 57 44 123 43 116 137 416 231 738 37 129 657
2469 713 2693 14 56 14 63 -2 87 -10 16 -26 26 -41 26 -31 0 -244 -74 -316
-110 -106 -54 -108 -58 -195 -329 -3 -9 -18 8 -37 40 -59 98 -165 149 -313
149 -521 0 -1102 -822 -1320 -1870 -36 -169 -71 -237 -202 -387 -77 -89 -196
-186 -267 -219 -66 -31 -125 -31 -153 -1 -74 79 -57 238 84 749 158 575 186
714 165 839 -31 188 -129 279 -301 279 -128 0 -296 -72 -443 -188 -92 -74
-233 -224 -301 -322 -32 -47 -57 -78 -54 -70 3 8 26 92 53 187 48 171 48 173
29 194 -26 29 -49 24 -233 -52 -176 -72 -227 -112 -275 -213 -18 -39 -96 -327
-216 -806 -103 -410 -206 -801 -229 -869 -76 -224 -170 -391 -273 -487 -74
-70 -128 -96 -210 -102 -64 -4 -68 -3 -97 25 -43 43 -54 98 -48 233 4 109 16
160 226 995 238 942 235 925 175 925 -34 0 -295 -94 -349 -125 -74 -43 -113
-94 -136 -176 -11 -41 -22 -80 -25 -88 -2 -8 -17 6 -37 35 -57 86 -142 124
-277 124 -191 0 -386 -104 -600 -319 -328 -331 -590 -857 -725 -1460 -28 -125
-40 -161 -81 -232 -204 -362 -449 -603 -650 -640 -147 -27 -262 65 -315 253
-20 72 -23 106 -24 258 0 99 6 213 14 263 l13 88 94 87 c178 164 396 411 579
653 568 752 975 1735 1002 2419 18 441 -117 636 -377 547z m5 -503 c37 -40 48
-110 42 -258 -14 -334 -169 -817 -428 -1336 -212 -425 -453 -799 -752 -1168
-55 -67 -101 -121 -103 -120 -5 6 45 266 82 427 224 969 741 2202 1026 2445
52 45 97 48 133 10z m5876 -347 c71 -48 107 -146 96 -263 -11 -117 -175 -713
-241 -875 -150 -372 -346 -591 -541 -607 -154 -12 -224 106 -212 355 27 517
373 1235 667 1381 82 41 178 45 231 9z m-4792 -1357 c100 -28 162 -170 147
-336 -14 -153 -186 -773 -255 -920 -129 -271 -317 -457 -479 -471 -98 -9 -158
33 -199 138 -28 75 -24 312 10 469 118 555 411 1048 665 1116 59 16 69 16 111
4z m3271 -1940 c392 -27 710 -55 710 -64 0 -16 -115 -228 -180 -331 -384 -611
-904 -962 -1534 -1036 -58 -7 -167 -9 -265 -6 -142 4 -179 9 -256 31 -261 78
-430 242 -476 461 -17 82 -14 245 6 330 34 150 123 286 248 379 177 134 436
215 777 245 121 11 770 5 970 -9z m-9128 -169 c150 -52 256 -176 299 -351 20
-80 17 -260 -6 -345 -33 -128 -96 -255 -188 -377 l-50 -67 -91 -22 c-219 -54
-380 -12 -510 132 -87 97 -133 230 -143 414 -11 205 44 371 162 491 69 70 177
128 265 143 75 13 196 5 262 -18z">>.


    
	
